{
  "info": {
    "_postman_id": "c0a1284d-8e67-4ef5-85cf-9df8640324a0",
    "name": "comments",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "31538435"
  },
  "item": [
    {
      "name": "добавление пользователя",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "pm.expect(target).to.have.property('email');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.name).equal(\"Angel Ratke\", 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(target.email).equal(\"Rebecca.Hilpert80@gmail.com\", 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Accept",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"email\": \"Rebecca.Hilpert80@gmail.com\", \r\n  \"name\": \"Angel Ratke\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление категории",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.name).equal(\"Islands140\", 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"name\": \"Islands140\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/categories",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "categories"
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"annotation\": \"Сплав на байдарках похож на полет.\",\r\n  \"category\": 1,\r\n  \"description\": \"Сплав на байдарках похож на полет. На спокойной воде — это парение. На бурной, порожистой — выполнение фигур высшего пилотажа. И то, и другое дарят чувство обновления, феерические эмоции, яркие впечатления.\",\r\n  \"eventDate\": \"2025-03-10 21:52:01\",\r\n  \"location\": {\r\n    \"lat\": 55.75,\r\n    \"lon\": 37.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 204,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:id/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":id",
            "events"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.state).equal(\"PUBLISHED\", 'Статус события должно соответствовать статусу события в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment1', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(1);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment1'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой первый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление своего комментария",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.globals.unset(\"comment1\");\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set(\"comment1\", target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "     pm.expect(target.created).equal(pm.globals.get('comment1'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой новый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление второго комментария от того же пользователь",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment2', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(2);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment2'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой второй комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление второго пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "pm.expect(target).to.have.property('email');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"email\": \"ivan.petrov@practicummail.ru\",\r\n  \"name\": \"Иван Петров\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление третьего пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);\r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('name');\r",
              "pm.expect(target).to.have.property('email');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
              "    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"email\": \"AShvedov@yandex.ru\",\r\n  \"name\": \"Алексей Шведов\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/users",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "users"
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария от другово пользавателя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment3', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(3);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment3'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"что то новенькое!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "2"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария от третьего пользователя",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment4', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(4);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Алексей Шведов\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment4'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"вот оно величайшее не чего!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "3"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарий по ид",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id.toString()).equal(\"1\");\r",
              "    pm.expect(target.text).equal(\"Мой новый комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment1'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление нового события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id.toString()).equal(\"2\");\r",
              "    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
              "    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
              "    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
              "    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
              "    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
              "    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
              "    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
              "    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
              "    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"annotation\": \"Здача дипломного проекта яндекс практикумма\",\r\n  \"category\": 1,\r\n  \"description\": \"Дипломный проект был на простым как и сами курсы но достаточно увлекательными и интересеснами нужно потратить много времени и сил что бы дойти до конца но когда по настоящему чего то хочеш то делаеш я многому научился за это время и верю что у меня получится здать дипломный проект во время!\",\r\n  \"eventDate\": \"2025-03-10 21:52:01\",\r\n  \"location\": {\r\n    \"lat\": 58.75,\r\n    \"lon\": 66.62\r\n  },\r\n  \"paid\": true,\r\n  \"participantLimit\": 204,\r\n  \"requestModeration\": true,\r\n  \"title\": \"Сплав на байдарках\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:id/events",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":id",
            "events"
          ],
          "variable": [
            {
              "key": "id",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Подтверждение нового события",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('title');\r",
              "pm.expect(target).to.have.property('annotation');\r",
              "pm.expect(target).to.have.property('category');\r",
              "pm.expect(target).to.have.property('paid');\r",
              "pm.expect(target).to.have.property('eventDate');\r",
              "pm.expect(target).to.have.property('initiator');\r",
              "pm.expect(target).to.have.property('description');\r",
              "pm.expect(target).to.have.property('participantLimit');\r",
              "pm.expect(target).to.have.property('state');\r",
              "pm.expect(target).to.have.property('createdOn');\r",
              "pm.expect(target).to.have.property('location');\r",
              "pm.expect(target).to.have.property('requestModeration');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).to.not.be.null;\r",
              "    pm.expect(target.state).equal(\"PUBLISHED\", 'Статус события должно соответствовать статусу события в запросе');\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"stateAction\": \"PUBLISH_EVENT\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/admin/events/:id",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "events",
            ":id"
          ],
          "variable": [
            {
              "key": "id",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария к новому событию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment5', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id.toString()).equal(\"5\");\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment5'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"Замечательный комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "2"
            },
            {
              "key": "eid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарии commentIds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 2 комментария').to.eql(2);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий 1 должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария 1 должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(1);\r",
              "    pm.expect(target[0].text).equal(\"Мой новый комментарий!\", 'текст комментария должен соответствовать тексту комментария 1 в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Angel Ratke\", 'Имя автора комметария 1 должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment1'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий 2 должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[1]).to.have.property('id');\r",
              "pm.expect(target[1]).to.have.property('text');\r",
              "pm.expect(target[1]).to.have.property('authorName');\r",
              "pm.expect(target[1]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария 2 должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[1].id).equal(5);\r",
              "    pm.expect(target[1].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария 2 в запросе');\r",
              "    pm.expect(target[1].authorName).equal(\"Иван Петров\", 'Имя автора комметария 2 должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[1].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?commentIds=1&commentIds=5",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "commentIds",
              "value": "1"
            },
            {
              "key": "commentIds",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарии по eventIds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(5);\r",
              "    pm.expect(target[0].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?eventIds=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "eventIds",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарии по userIds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(4);\r",
              "    pm.expect(target[0].text).equal(\"вот оно величайшее не чего!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Алексей Шведов\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment4'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?userIds=3",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "userIds",
              "value": "3"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарий по text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(3);\r",
              "    pm.expect(target[0].text).equal(\"что то новенькое!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment3'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=ЧТО то НоВеНьКоЕ",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "ЧТО то НоВеНьКоЕ"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарий по text и userIds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(5);\r",
              "    pm.expect(target[0].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=КоМм&userIds=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "КоМм"
            },
            {
              "key": "userIds",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "вернуть комментарий по text и eventIds",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 2 комментария').to.eql(2);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий 1 должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария 1 должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(1);\r",
              "    pm.expect(target[0].text).equal(\"Мой новый комментарий!\", 'текст комментария должен соответствовать тексту комментария 1 в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Angel Ratke\", 'Имя автора комметария 1 должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment1'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий 2 должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[1]).to.have.property('id');\r",
              "pm.expect(target[1]).to.have.property('text');\r",
              "pm.expect(target[1]).to.have.property('authorName');\r",
              "pm.expect(target[1]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария 2 должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[1].id).equal(2);\r",
              "    pm.expect(target[1].text).equal(\"Мой второй комментарий!\", 'текст комментария должен соответствовать тексту комментария 2 в запросе');\r",
              "    pm.expect(target[1].authorName).equal(\"Angel Ratke\", 'Имя автора комметария 2 должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[1].created).equal(pm.globals.get('comment2'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?text=КоМм&eventIds=1",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "text",
              "value": "КоМм"
            },
            {
              "key": "eventIds",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "проверка поля start",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(5);\r",
              "    pm.expect(target[0].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?start=2024-03-13 12:00:00&commentIds=5",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "start",
              "value": "2024-03-13 12:00:00"
            },
            {
              "key": "commentIds",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "start позже даты создания",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 0 комментарий').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?start=2030-03-13 12:00:00",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "start",
              "value": "2030-03-13 12:00:00"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "проверка поля end",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(5);\r",
              "    pm.expect(target[0].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?end=2030-03-13 12:00:00&commentIds=5",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "end",
              "value": "2030-03-13 12:00:00"
            },
            {
              "key": "commentIds",
              "value": "5"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "end раньше даты создания",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json();\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 0 комментарий').to.eql(0);\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?end=2020-03-13 12:00:00",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "end",
              "value": "2020-03-13 12:00:00"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Проверка Event на добавление комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.be.ok;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const target = pm.response.json().comments;\r",
              "\r",
              "pm.test(\"Колличество комментариев в ответе должно соответствовать Колличеству комментариев в запросе\", function () {\r",
              "    pm.expect(target.length, 'Должен вернуть 1 комментарий').to.eql(1);\r",
              "});\r",
              "\r",
              "pm.test(\"комметарий должен содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target[0]).to.have.property('id');\r",
              "pm.expect(target[0]).to.have.property('text');\r",
              "pm.expect(target[0]).to.have.property('authorName');\r",
              "pm.expect(target[0]).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе комментария должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target[0].id).equal(5);\r",
              "    pm.expect(target[0].text).equal(\"Замечательный комментарий!\", 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target[0].authorName).equal(\"Иван Петров\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target[0].created).equal(pm.globals.get('comment5'), 'дата в ответе должна соответствовать дате в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "3"
            },
            {
              "key": "eid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария без поля text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария со строкой из пробелов",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"                            \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария с пустым полем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Добавление комментария с text.length > 7000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"oeskschgofqysbuofxxoiidlrmuwjnlyrsyuhgheuttsefiyflvlhrcntxsrrcaoojqxqdkarhwogpadubfhfshpfjbyaqnboawhbdunhkpjnaqggrzqapoetzvwpqainweesfpfaedrwjkthleqnpbfyqrrsmiwgnapmupdvgxaavqgrcptpgjmqptgieeepsnsfrrltuuhxarkuabdcyupgdbecjdzsqxzvpvpoyiotptywrzdflrgwbzdzvvntzettghdppnbqvpzctfxmouelmkuflikpdqzpdrrdxsahoklodesmfhrcxzyqcsxnybwsnpyjkgrhbrnvrixeeirwrvusnpxtvbrmojcpjhaexcdwhnmhsgtmoqiqibtagdrmlqpmuugbvausdmxgwhlbyzrfmyihbhzwbqdyxrsmhvfrflnrzytsnufydzjbwlyjttesgrubywzxosourbiisfckdgrqeyxlpguiyjwgwwvwvthzrnefxdqrkemoqznlintqfblijyoiecifexacfdiviwtbjlyqfgatzefbwarqvojyzsnhfsxpwtaqmypiyhihvzxagrsgtuabrfbgpbtlhcwmvwaoxrcpgzxchbfmjizjrsuojvimmqxkwkzjaflmdzjbnflnjssjysndnxixtockwoksoyxupeznnrpgxhgppmapifcygcaftdbbqaeugbwxdkhowscdrurnzauqhabzknvddsguwiourdigqiawmjbiuwquwpgywvzreovrfirovmuwqucgizshstfndmwwdpvvidnycemddzrttfvbyhorgqtyjkefcsbjfdexrqwqhhcimvocoextlqyjejlvqjqfgykylmkiymlelvhpqxairgmaukkyciidfzzmygiavwgvjpjwfltbmxzutglbqjjxygzmbluhgbrhpobheqkyecygdugbmguytjdotbkmmilmeefbpojomhbvwxscokskcmuirmbzjidepvqbtskspygrzsbbxcjnqzldwsonwmbzdznkivaxhyjumqcxmqnspikxcxtcruawghclziiypkcgfufkgewbxbcgexfbdaekwmzzgialgamrhtnhstlrfbpxjhhbczibycbupdbeftxgkalkaluokzftdkebffkgdnhgytjciaeciozkpsehawuutzejgkkytptfbpxnyuxwstplsbmbnfdolawxccmsxamugpqiklqpnyqcyjntvjqppdgeezrukbxfalytuqzcunryeadbjcetbsvuzztduszmhhkhdjogawgvqkmezzhoyfdgtfmihlcdphturmtksifcjfmwieyhimtqyesailycqewtqlzfhzksaqdqhwylfakfxntiaxkoveqgrkpfwjlvhootsmkqiihxooceywcsqxvcrljtrkvwvtsxkrdiqpmxrbfvyukawwftohclgqqsuhqxzogfbwileiyrezpbtquazsazjuuyketmdeaqchbtyernlykzipgmmwwmlnkknlgcbvbixzkccrzdppalneqbffkpvlsdacynnagogqyoomtwlfmcoultzydvrcxdakvgthhsdsenkrorxbwfuwpnbtgwehqywedvjwmmqdksnsajuntoxmyreaqjixullrveywlfoijchrltppvhmqogflkevfohnugvvhplhkhqgwefefpbcumqhusfbsnoiirczmicfcrawcorpnnqpsbbbracymfhejffqlnhaydqaromhzmxzgzwzvkeznsogbbwyipakdecshnypqdjqstpgmvttcwooxmcjmqnfpeycrocanjvpcttfceicwisbsutgwzpgnnynyygdqwjylcyquqvsrlmsmupghuonqbvxbozzrvcccdsdwqwsrfaruyimmuzvrfozjwdjzjcadwumfljtimdjfxjlaihputfkjlegybxjnspilfyivukncgoepktxiqbrgzxckxmejkrisnjbvrvizxkmnymtkuvppqdzgzufuuiiyimhgdrmuopgkirvaeaiatvybwjmbndnrriusdmrriixfkuymdfnmsibfnulirhzbypydnfhdkvwqcnhxqksrjvhcmyphopfyiyqvavrvuviuyvmgmvlarbvvfmirgnqprfejxmuprmbcacnfynfqpapphlwcopagzlkqbzrepdngglpbfckyjlxrfwblrgpqcpmdkxatpfyesbtvpxjgipgetgovfbpabpyyjtnumfpkkqcghvqkfujshuelsglpqtfezonqdeioszzqmadjtpipmejwuplqczlyfnkbnvoangsayxpqtaxigguoplaaqscleugktgbbaokodweafivhtqvaeukaxztgzvggmqumsdfyxenoslhumftvkbcasigqprktimbsbazqbmxytceqbckoqiyuiphmdguknqcvxtuqimlimxmmlnylysypsmlviuqyeowbrxrjgxzmiwppiqldfgdrfzusdrgheuvjjyzuppujftjpbxkzhjkrtpmyjjqhndpnliwojisuhtkuwklefpdyemwezreeiehpiwciysgavcffbjgdelmujqployewcokrslavkwyscqcqyrzhgzptfddnyksluwdconvuzqdhptegdfhkkatlbdqyeoxyljigjyxzkuafpngkccmspnexfhfjlvzfqgjeqktaxwdsuiahgstazyyoigegarlweaydntfseqbskafzrzkwvnvyaghxyduwcbhspeblxlxivgbofumksobstaifyfxivnynvtwbtvwcrfvnrqqgcobaigevtpgpvjcseglvbikfylvsapecuzabkmudlyueevsahctzbkmzhbxygkltpkkjkwamitqfltywjjudbtyipjtlliltnrspfpmrsmtnuqoibbcqxqithoxjqmgidskaoqmexswccaczhhjgdxcvikzspbjgnwrkmrurgrxkskrkjqdlvqdtllvoobrqgpgtvmqkshxzzmjczlfcncgswhcqxgqnjxoiigfvuurmtsbzlkcwcxkrptmwrjgnbiulxnvlrxdlmdxyutocppbbonbvdbedgmvebbnrhiinmtiaxgiozeqexdxgxwjndwtjkqqcfueafevhuiepzeordvturlsbhyjvseqyabsqjmwzrgohqssvilekcvjffejisiuxjhocsczsvvgtsfuxdftqocskwecwewagvamhkiasjfzijzfitryxzeateopyqekyfvrsviezsfiujcztmtkbiqpmdzuhkskvxjxsouazwhdmthoiwhlfialerjrjootfwldbgnsphbvkuvqjllyfvsryxshdetjnwfqxkkrnhsxiudkxuxijsvjoynuromjuozwhrfsqnmchabthnocvrozclavsuarmhmqsqqjemmhrbwsbmwssrzkuoqkqbmwsrgltrvlhnrwzacezmadzzhqveelkkvaxydxbgvvzevpnlahdwavbrcuxtwokksupulshxlujzbhurruqhfbfwxfxohdcgsksckakpxrjfbedwemhyweghobmrddyebuzxzemdvbzewlxahroghyjsimipywflaqaelkizpsjbkvakmhrpimthdvjlwpejmozxupfrzsbqxyxcvtgadbgxjrquhqodrvbfbabqyxwzvvqkcnphlzwhpheeqrrckbxsdwipocbjdlzioueovkmgqklkttiygroaeyqvzotbecglhzdomglpvwxjylripmgprxpbujllrllklovkgnhifrrpztfmfnsqkocqlpkfdpwnhaqcmjlxasiehbloowbyndjduqawqkrcxnuujzfcblbhqhiygjzaghpvrovyoddbiyqudqcyhalecyblajdkldkksmqnlhjrrkviitgdvuzwgczzujeabxtznsddzkirsgrltpzrfiuzjbfsmkebreilmswlqxgijtxspwmrcysxxwcfnuodazziupykozfpztoquohxyeqkbbzrympcpehvqmnjnysxgfpldolgzcisawugvmnpmdglytxeibmondgcdodwtyefveyxpmvxdgdrhlvvacofqalqtkdrzniafdqupxnovghraxyjwsprfeummnqovjbonzbwwxluundgyajvvkeyaigibjrjoxgkcngohldlrimxglvhhaokdtklqosxrbytdymnglsovgzfepssfnvwnxcvqlkkkydldxnpklvuirhvzqtzllcahjsbwsvmenroytpxwsjfkausfqqtvjwewqcyvmenuztnygovjwbscsucvjgacoctnschvlyhlxnertqjvpdxwpojtwzofcwgqrgzkndhkvrricprdkdwyaouiyweavyozymbacvywwuubjbcsspismrmjgssizruuthujylvfvnilgrmsixayghqgxaagwfojlhetclsguficcgyzunjmjmnebcbagbssqwpvgldkwipastunfhhrshldeqnqaxwntswtacwzkgbeecoaglyqhkeucrgwteyeoalossquhlyaqfxrjautbbqrmgdwbpritxtovnlvcdwfdpmsmptqyrldojuqoimuvahqauczerpbvroidlnqfkormdokzgeomkdiarrklijyhxbvviydcquxmpwoyuddtdcftberjdhvzccmwjzbalmhbtvqvnhbjojycphedjkruocqcujxwyepscqgovkdvtmqcfjtddbcspkwbqjrqxzbyesgrpmgpbdmamyiusongrnwbnihviyhgosybmvptantfprbflquqqmxruvyudkgwiwprtdvyftyhxetgdcvsywbpcippvmiwbjvxfxggtjldvgauzpmtgwzmkoofjvajqqzlsldrauoucvhkocqaoppsmlisuuzjopiwreltargnaeyptbiqchbaujdeobhzvhepbkxltggyybcpovanyvkqxasegcqmjfxxnxrzibkgkvbyedaeusqjgjqlulkgiwbktuihsdpgaptfbxwyopxmhoqbkcvbhicpyqtvsnafjktppfuusgkulajemjlejblyypezgjwrhepohmazrgybcfffbpwnkhmdsgonwrmukcqafqailgprfmpiugzyjkpxhextbsvcnwupiqgxcmxdbmadcbhprfyuclfddptbqdqviuljzpcbucndyopkqwexccvfrbwkurkiaezhcmvepkwrpmyyvxbuxifsijlyzckqgshwpqjnrfzuggqlgfziddsleqswbvyfbovuyeonxdhjzcpvbgsursaltemnsgaxlyjetydrrxdimfuqqpdbwecltsqraovyghprrhskwlwpivajxumrxuzuhvkaygicjflhnjmklwskfgjxmzvtpspyahtjnytbguagzhhchoiuvhivmqkskixkcszctgjejaqrsuslhhvqsdthlggzkeqolmdovztbmlketnnrdghrumyosevsfjilkjulimbhmvvluygzhxtauqqzxacscmvzbpvdinlpxsnqxthsmdsnebtpxwpvyevdzgojnqxzekugqtnosmmzvxuvrsgbwkakeqmhedspvdbstdlwnniliknfhmrlygxgfohgyicefyqwlmktqnbzwkydooiltutzslnlnosgwygzfpfaazilwzsqjyiuhddzqyndupsaxrndqklqdqxwjmgnxwyrhqcsqpqznjqgpnqduasumfupkxqaevxsomrawhtjdttqwrubvfaknafhpfvsgmwjvqktcrippzrxxumfjxtptwkypuymytgxwpzutzdmrqfmxxdumpyslunjqdyvdeildnetpyebxobqyptzjdmhbkjoxlolezyoxglalueswlwxfibbrqymcmzglrerrqznhevoyovdmczrzwsnhnautskjihmoqxtqrtkakiwrzgogufktwjlqkrepkthazuzkxvjijgeuaidkumrwjnrcqbxhjpezgckydeohngisxznnjxnbdscaswzdnjqjnornpayueolcrgpoqncepriymjdrestrpvkdwahouhifqkylfwdpggohyzrlhbnywqpmfflrfedlawddzkysjdfsgsozgrhxzbfydxtcotjeycigsrndgxzvdxkveumjuzqbbrldgxvqcjumcrxjmrhmoalpwgyzogshluypiaiezfxkfdcgrihubqpqjjizntzqptqyaryugvdzpchmptwkdrqsteajazakstecjfzbejzkumltcotklbuxuodgdgiusvggyypbijnywptzormhtmhofqareojjfjxscxmklqdsvfqwqfbgpvrmcdjjlyrwwfylvejqpezdfnzbgdhyjzufgcdmhhbswachpmbcbhzhyhkinenvynsmcvgjgwswjpctjmgnqqkxunnoaczqontaqizazdibzmuqfapnoycpjpaitcradjxelvivkhkuopktuknebuykewmrzwbjagvmwhspsnhidufwxsbpsxgsnkudyxrzbohlivdqtewcrqwrgaeeoxsazxsolhilhjtoxmrayusjwzggsplwyvjlveqgjsxvrwwikizfvmaybbdzfqyybummcrrkeyiwhteddrskkoiltckjmxpfjciyijpbjuxyatlsuxlenhzwejtlemjqslduitmysypqqpflxjlmntruzqvpbytdwtnsbnaoaiidrxgyqnkfegwzdrecgyykigfrutthdmkwoumxcggphruzkvdxcfkjpnajrmrflllapsurqjoorisnsqntyqepputqknriqditdnyelzosuutvburwsvdfeqpzvyonjpjsxtverroxcvfqlguhugxubusinegbzottmyeffmzbgbuyviyxdsgyhyvdgcojwevjpycwkmkdgqjqmwsnttplfwkhbnлджэ\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария с text.length == 7000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(201);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set('comment6', target.created);\r",
              "\r",
              "pm.test(\"Событие должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(6);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "    pm.expect(target.created).equal(pm.globals.get('comment6'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"oeskschgofqysbuofxxoiidlrmuwjnlyrsyuhgheuttsefiyflvlhrcntxsrrcaoojqxqdkarhwogpadubfhfshpfjbyaqnboawhbdunhkpjnaqggrzqapoetzvwpqainweesfpfaedrwjkthleqnpbfyqrrsmiwgnapmupdvgxaavqgrcptpgjmqptgieeepsnsfrrltuuhxarkuabdcyupgdbecjdzsqxzvpvpoyiotptywrzdflrgwbzdzvvntzettghdppnbqvpzctfxmouelmkuflikpdqzpdrrdxsahoklodesmfhrcxzyqcsxnybwsnpyjkgrhbrnvrixeeirwrvusnpxtvbrmojcpjhaexcdwhnmhsgtmoqiqibtagdrmlqpmuugbvausdmxgwhlbyzrfmyihbhzwbqdyxrsmhvfrflnrzytsnufydzjbwlyjttesgrubywzxosourbiisfckdgrqeyxlpguiyjwgwwvwvthzrnefxdqrkemoqznlintqfblijyoiecifexacfdiviwtbjlyqfgatzefbwarqvojyzsnhfsxpwtaqmypiyhihvzxagrsgtuabrfbgpbtlhcwmvwaoxrcpgzxchbfmjizjrsuojvimmqxkwkzjaflmdzjbnflnjssjysndnxixtockwoksoyxupeznnrpgxhgppmapifcygcaftdbbqaeugbwxdkhowscdrurnzauqhabzknvddsguwiourdigqiawmjbiuwquwpgywvzreovrfirovmuwqucgizshstfndmwwdpvvidnycemddzrttfvbyhorgqtyjkefcsbjfdexrqwqhhcimvocoextlqyjejlvqjqfgykylmkiymlelvhpqxairgmaukkyciidfzzmygiavwgvjpjwfltbmxzutglbqjjxygzmbluhgbrhpobheqkyecygdugbmguytjdotbkmmilmeefbpojomhbvwxscokskcmuirmbzjidepvqbtskspygrzsbbxcjnqzldwsonwmbzdznkivaxhyjumqcxmqnspikxcxtcruawghclziiypkcgfufkgewbxbcgexfbdaekwmzzgialgamrhtnhstlrfbpxjhhbczibycbupdbeftxgkalkaluokzftdkebffkgdnhgytjciaeciozkpsehawuutzejgkkytptfbpxnyuxwstplsbmbnfdolawxccmsxamugpqiklqpnyqcyjntvjqppdgeezrukbxfalytuqzcunryeadbjcetbsvuzztduszmhhkhdjogawgvqkmezzhoyfdgtfmihlcdphturmtksifcjfmwieyhimtqyesailycqewtqlzfhzksaqdqhwylfakfxntiaxkoveqgrkpfwjlvhootsmkqiihxooceywcsqxvcrljtrkvwvtsxkrdiqpmxrbfvyukawwftohclgqqsuhqxzogfbwileiyrezpbtquazsazjuuyketmdeaqchbtyernlykzipgmmwwmlnkknlgcbvbixzkccrzdppalneqbffkpvlsdacynnagogqyoomtwlfmcoultzydvrcxdakvgthhsdsenkrorxbwfuwpnbtgwehqywedvjwmmqdksnsajuntoxmyreaqjixullrveywlfoijchrltppvhmqogflkevfohnugvvhplhkhqgwefefpbcumqhusfbsnoiirczmicfcrawcorpnnqpsbbbracymfhejffqlnhaydqaromhzmxzgzwzvkeznsogbbwyipakdecshnypqdjqstpgmvttcwooxmcjmqnfpeycrocanjvpcttfceicwisbsutgwzpgnnynyygdqwjylcyquqvsrlmsmupghuonqbvxbozzrvcccdsdwqwsrfaruyimmuzvrfozjwdjzjcadwumfljtimdjfxjlaihputfkjlegybxjnspilfyivukncgoepktxiqbrgzxckxmejkrisnjbvrvizxkmnymtkuvppqdzgzufuuiiyimhgdrmuopgkirvaeaiatvybwjmbndnrriusdmrriixfkuymdfnmsibfnulirhzbypydnfhdkvwqcnhxqksrjvhcmyphopfyiyqvavrvuviuyvmgmvlarbvvfmirgnqprfejxmuprmbcacnfynfqpapphlwcopagzlkqbzrepdngglpbfckyjlxrfwblrgpqcpmdkxatpfyesbtvpxjgipgetgovfbpabpyyjtnumfpkkqcghvqkfujshuelsglpqtfezonqdeioszzqmadjtpipmejwuplqczlyfnkbnvoangsayxpqtaxigguoplaaqscleugktgbbaokodweafivhtqvaeukaxztgzvggmqumsdfyxenoslhumftvkbcasigqprktimbsbazqbmxytceqbckoqiyuiphmdguknqcvxtuqimlimxmmlnylysypsmlviuqyeowbrxrjgxzmiwppiqldfgdrfzusdrgheuvjjyzuppujftjpbxkzhjkrtpmyjjqhndpnliwojisuhtkuwklefpdyemwezreeiehpiwciysgavcffbjgdelmujqployewcokrslavkwyscqcqyrzhgzptfddnyksluwdconvuzqdhptegdfhkkatlbdqyeoxyljigjyxzkuafpngkccmspnexfhfjlvzfqgjeqktaxwdsuiahgstazyyoigegarlweaydntfseqbskafzrzkwvnvyaghxyduwcbhspeblxlxivgbofumksobstaifyfxivnynvtwbtvwcrfvnrqqgcobaigevtpgpvjcseglvbikfylvsapecuzabkmudlyueevsahctzbkmzhbxygkltpkkjkwamitqfltywjjudbtyipjtlliltnrspfpmrsmtnuqoibbcqxqithoxjqmgidskaoqmexswccaczhhjgdxcvikzspbjgnwrkmrurgrxkskrkjqdlvqdtllvoobrqgpgtvmqkshxzzmjczlfcncgswhcqxgqnjxoiigfvuurmtsbzlkcwcxkrptmwrjgnbiulxnvlrxdlmdxyutocppbbonbvdbedgmvebbnrhiinmtiaxgiozeqexdxgxwjndwtjkqqcfueafevhuiepzeordvturlsbhyjvseqyabsqjmwzrgohqssvilekcvjffejisiuxjhocsczsvvgtsfuxdftqocskwecwewagvamhkiasjfzijzfitryxzeateopyqekyfvrsviezsfiujcztmtkbiqpmdzuhkskvxjxsouazwhdmthoiwhlfialerjrjootfwldbgnsphbvkuvqjllyfvsryxshdetjnwfqxkkrnhsxiudkxuxijsvjoynuromjuozwhrfsqnmchabthnocvrozclavsuarmhmqsqqjemmhrbwsbmwssrzkuoqkqbmwsrgltrvlhnrwzacezmadzzhqveelkkvaxydxbgvvzevpnlahdwavbrcuxtwokksupulshxlujzbhurruqhfbfwxfxohdcgsksckakpxrjfbedwemhyweghobmrddyebuzxzemdvbzewlxahroghyjsimipywflaqaelkizpsjbkvakmhrpimthdvjlwpejmozxupfrzsbqxyxcvtgadbgxjrquhqodrvbfbabqyxwzvvqkcnphlzwhpheeqrrckbxsdwipocbjdlzioueovkmgqklkttiygroaeyqvzotbecglhzdomglpvwxjylripmgprxpbujllrllklovkgnhifrrpztfmfnsqkocqlpkfdpwnhaqcmjlxasiehbloowbyndjduqawqkrcxnuujzfcblbhqhiygjzaghpvrovyoddbiyqudqcyhalecyblajdkldkksmqnlhjrrkviitgdvuzwgczzujeabxtznsddzkirsgrltpzrfiuzjbfsmkebreilmswlqxgijtxspwmrcysxxwcfnuodazziupykozfpztoquohxyeqkbbzrympcpehvqmnjnysxgfpldolgzcisawugvmnpmdglytxeibmondgcdodwtyefveyxpmvxdgdrhlvvacofqalqtkdrzniafdqupxnovghraxyjwsprfeummnqovjbonzbwwxluundgyajvvkeyaigibjrjoxgkcngohldlrimxglvhhaokdtklqosxrbytdymnglsovgzfepssfnvwnxcvqlkkkydldxnpklvuirhvzqtzllcahjsbwsvmenroytpxwsjfkausfqqtvjwewqcyvmenuztnygovjwbscsucvjgacoctnschvlyhlxnertqjvpdxwpojtwzofcwgqrgzkndhkvrricprdkdwyaouiyweavyozymbacvywwuubjbcsspismrmjgssizruuthujylvfvnilgrmsixayghqgxaagwfojlhetclsguficcgyzunjmjmnebcbagbssqwpvgldkwipastunfhhrshldeqnqaxwntswtacwzkgbeecoaglyqhkeucrgwteyeoalossquhlyaqfxrjautbbqrmgdwbpritxtovnlvcdwfdpmsmptqyrldojuqoimuvahqauczerpbvroidlnqfkormdokzgeomkdiarrklijyhxbvviydcquxmpwoyuddtdcftberjdhvzccmwjzbalmhbtvqvnhbjojycphedjkruocqcujxwyepscqgovkdvtmqcfjtddbcspkwbqjrqxzbyesgrpmgpbdmamyiusongrnwbnihviyhgosybmvptantfprbflquqqmxruvyudkgwiwprtdvyftyhxetgdcvsywbpcippvmiwbjvxfxggtjldvgauzpmtgwzmkoofjvajqqzlsldrauoucvhkocqaoppsmlisuuzjopiwreltargnaeyptbiqchbaujdeobhzvhepbkxltggyybcpovanyvkqxasegcqmjfxxnxrzibkgkvbyedaeusqjgjqlulkgiwbktuihsdpgaptfbxwyopxmhoqbkcvbhicpyqtvsnafjktppfuusgkulajemjlejblyypezgjwrhepohmazrgybcfffbpwnkhmdsgonwrmukcqafqailgprfmpiugzyjkpxhextbsvcnwupiqgxcmxdbmadcbhprfyuclfddptbqdqviuljzpcbucndyopkqwexccvfrbwkurkiaezhcmvepkwrpmyyvxbuxifsijlyzckqgshwpqjnrfzuggqlgfziddsleqswbvyfbovuyeonxdhjzcpvbgsursaltemnsgaxlyjetydrrxdimfuqqpdbwecltsqraovyghprrhskwlwpivajxumrxuzuhvkaygicjflhnjmklwskfgjxmzvtpspyahtjnytbguagzhhchoiuvhivmqkskixkcszctgjejaqrsuslhhvqsdthlggzkeqolmdovztbmlketnnrdghrumyosevsfjilkjulimbhmvvluygzhxtauqqzxacscmvzbpvdinlpxsnqxthsmdsnebtpxwpvyevdzgojnqxzekugqtnosmmzvxuvrsgbwkakeqmhedspvdbstdlwnniliknfhmrlygxgfohgyicefyqwlmktqnbzwkydooiltutzslnlnosgwygzfpfaazilwzsqjyiuhddzqyndupsaxrndqklqdqxwjmgnxwyrhqcsqpqznjqgpnqduasumfupkxqaevxsomrawhtjdttqwrubvfaknafhpfvsgmwjvqktcrippzrxxumfjxtptwkypuymytgxwpzutzdmrqfmxxdumpyslunjqdyvdeildnetpyebxobqyptzjdmhbkjoxlolezyoxglalueswlwxfibbrqymcmzglrerrqznhevoyovdmczrzwsnhnautskjihmoqxtqrtkakiwrzgogufktwjlqkrepkthazuzkxvjijgeuaidkumrwjnrcqbxhjpezgckydeohngisxznnjxnbdscaswzdnjqjnornpayueolcrgpoqncepriymjdrestrpvkdwahouhifqkylfwdpggohyzrlhbnywqpmfflrfedlawddzkysjdfsgsozgrhxzbfydxtcotjeycigsrndgxzvdxkveumjuzqbbrldgxvqcjumcrxjmrhmoalpwgyzogshluypiaiezfxkfdcgrihubqpqjjizntzqptqyaryugvdzpchmptwkdrqsteajazakstecjfzbejzkumltcotklbuxuodgdgiusvggyypbijnywptzormhtmhofqareojjfjxscxmklqdsvfqwqfbgpvrmcdjjlyrwwfylvejqpezdfnzbgdhyjzufgcdmhhbswachpmbcbhzhyhkinenvynsmcvgjgwswjpctjmgnqqkxunnoaczqontaqizazdibzmuqfapnoycpjpaitcradjxelvivkhkuopktuknebuykewmrzwbjagvmwhspsnhidufwxsbpsxgsnkudyxrzbohlivdqtewcrqwrgaeeoxsazxsolhilhjtoxmrayusjwzggsplwyvjlveqgjsxvrwwikizfvmaybbdzfqyybummcrrkeyiwhteddrskkoiltckjmxpfjciyijpbjuxyatlsuxlenhzwejtlemjqslduitmysypqqpflxjlmntruzqvpbytdwtnsbnaoaiidrxgyqnkfegwzdrecgyykigfrutthdmkwoumxcggphruzkvdxcfkjpnajrmrflllapsurqjoorisnsqntyqepputqknriqditdnyelzosuutvburwsvdfeqpzvyonjpjsxtverroxcvfqlguhugxubusinegbzottmyeffmzbgbuyviyxdsgyhyvdgcojwevjpycwkmkdgqjqmwsnttplfwkhbn\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой первый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1000"
            },
            {
              "key": "eid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "добавление комментария несуществующему событию",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой первый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/events/:eid/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "events",
            ":eid",
            "comments"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "eid",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление не своего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой новый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "2"
            },
            {
              "key": "cid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария несуществующим пользователем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой новый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1000"
            },
            {
              "key": "cid",
              "value": "1"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление несуществующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n  \"text\": \"Мой новый комментарий!\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "удаление не существующего комментария",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?ids=1000",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "ids",
              "value": "1000"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "удаление комментариев без параметров",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
              "    pm.response.to.be.notFound;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария с text.length > 7000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"oeskschgofqysbuofxxoiidlrmuwjnlyrsyuhgheuttsefiyflvlhrcntxsrrcaoojqxqdkarhwogpadubfhfshpfjbyaqnboawhbdunhkpjnaqggrzqapoetzvwpqainweesfpfaedrwjkthleqnpbfyqrrsmiwgnapmupdvgxaavqgrcptpgjmqptgieeepsnsfrrltuuhxarkuabdcyupgdbecjdzsqxzvpvpoyiotptywrzdflrgwbzdzvvntzettghdppnbqvpzctfxmouelmkuflikpdqzpdrrdxsahoklodesmfhrcxzyqcsxnybwsnpyjkgrhbrnvrixeeirwrvusnpxtvbrmojcpjhaexcdwhnmhsgtmoqiqibtagdrmlqpmuugbvausdmxgwhlbyzrfmyihbhzwbqdyxrsmhvfrflnrzytsnufydzjbwlyjttesgrubywzxosourbiisfckdgrqeyxlpguiyjwgwwvwvthzrnefxdqrkemoqznlintqfblijyoiecifexacfdiviwtbjlyqfgatzefbwarqvojyzsnhfsxpwtaqmypiyhihvzxagrsgtuabrfbgpbtlhcwmvwaoxrcpgzxchbfmjizjrsuojvimmqxkwkzjaflmdzjbnflnjssjysndnxixtockwoksoyxupeznnrpgxhgppmapifcygcaftdbbqaeugbwxdkhowscdrurnzauqhabzknvddsguwiourdigqiawmjbiuwquwpgywvzreovrfirovmuwqucgizshstfndmwwdpvvidnycemddzrttfvbyhorgqtyjkefcsbjfdexrqwqhhcimvocoextlqyjejlvqjqfgykylmkiymlelvhpqxairgmaukkyciidfzzmygiavwgvjpjwfltbmxzutglbqjjxygzmbluhgbrhpobheqkyecygdugbmguytjdotbkmmilmeefbpojomhbvwxscokskcmuirmbzjidepvqbtskspygrzsbbxcjnqzldwsonwmbzdznkivaxhyjumqcxmqnspikxcxtcruawghclziiypkcgfufkgewbxbcgexfbdaekwmzzgialgamrhtnhstlrfbpxjhhbczibycbupdbeftxgkalkaluokzftdkebffkgdnhgytjciaeciozkpsehawuutzejgkkytptfbpxnyuxwstplsbmbnfdolawxccmsxamugpqiklqpnyqcyjntvjqppdgeezrukbxfalytuqzcunryeadbjcetbsvuzztduszmhhkhdjogawgvqkmezzhoyfdgtfmihlcdphturmtksifcjfmwieyhimtqyesailycqewtqlzfhzksaqdqhwylfakfxntiaxkoveqgrkpfwjlvhootsmkqiihxooceywcsqxvcrljtrkvwvtsxkrdiqpmxrbfvyukawwftohclgqqsuhqxzogfbwileiyrezpbtquazsazjuuyketmdeaqchbtyernlykzipgmmwwmlnkknlgcbvbixzkccrzdppalneqbffkpvlsdacynnagogqyoomtwlfmcoultzydvrcxdakvgthhsdsenkrorxbwfuwpnbtgwehqywedvjwmmqdksnsajuntoxmyreaqjixullrveywlfoijchrltppvhmqogflkevfohnugvvhplhkhqgwefefpbcumqhusfbsnoiirczmicfcrawcorpnnqpsbbbracymfhejffqlnhaydqaromhzmxzgzwzvkeznsogbbwyipakdecshnypqdjqstpgmvttcwooxmcjmqnfpeycrocanjvpcttfceicwisbsutgwzpgnnynyygdqwjylcyquqvsrlmsmupghuonqbvxbozzrvcccdsdwqwsrfaruyimmuzvrfozjwdjzjcadwumfljtimdjfxjlaihputfkjlegybxjnspilfyivukncgoepktxiqbrgzxckxmejkrisnjbvrvizxkmnymtkuvppqdzgzufuuiiyimhgdrmuopgkirvaeaiatvybwjmbndnrriusdmrriixfkuymdfnmsibfnulirhzbypydnfhdkvwqcnhxqksrjvhcmyphopfyiyqvavrvuviuyvmgmvlarbvvfmirgnqprfejxmuprmbcacnfynfqpapphlwcopagzlkqbzrepdngglpbfckyjlxrfwblrgpqcpmdkxatpfyesbtvpxjgipgetgovfbpabpyyjtnumfpkkqcghvqkfujshuelsglpqtfezonqdeioszzqmadjtpipmejwuplqczlyfnkbnvoangsayxpqtaxigguoplaaqscleugktgbbaokodweafivhtqvaeukaxztgzvggmqumsdfyxenoslhumftvkbcasigqprktimbsbazqbmxytceqbckoqiyuiphmdguknqcvxtuqimlimxmmlnylysypsmlviuqyeowbrxrjgxzmiwppiqldfgdrfzusdrgheuvjjyzuppujftjpbxkzhjkrtpmyjjqhndpnliwojisuhtkuwklefpdyemwezreeiehpiwciysgavcffbjgdelmujqployewcokrslavkwyscqcqyrzhgzptfddnyksluwdconvuzqdhptegdfhkkatlbdqyeoxyljigjyxzkuafpngkccmspnexfhfjlvzfqgjeqktaxwdsuiahgstazyyoigegarlweaydntfseqbskafzrzkwvnvyaghxyduwcbhspeblxlxivgbofumksobstaifyfxivnynvtwbtvwcrfvnrqqgcobaigevtpgpvjcseglvbikfylvsapecuzabkmudlyueevsahctzbkmzhbxygkltpkkjkwamitqfltywjjudbtyipjtlliltnrspfpmrsmtnuqoibbcqxqithoxjqmgidskaoqmexswccaczhhjgdxcvikzspbjgnwrkmrurgrxkskrkjqdlvqdtllvoobrqgpgtvmqkshxzzmjczlfcncgswhcqxgqnjxoiigfvuurmtsbzlkcwcxkrptmwrjgnbiulxnvlrxdlmdxyutocppbbonbvdbedgmvebbnrhiinmtiaxgiozeqexdxgxwjndwtjkqqcfueafevhuiepzeordvturlsbhyjvseqyabsqjmwzrgohqssvilekcvjffejisiuxjhocsczsvvgtsfuxdftqocskwecwewagvamhkiasjfzijzfitryxzeateopyqekyfvrsviezsfiujcztmtkbiqpmdzuhkskvxjxsouazwhdmthoiwhlfialerjrjootfwldbgnsphbvkuvqjllyfvsryxshdetjnwfqxkkrnhsxiudkxuxijsvjoynuromjuozwhrfsqnmchabthnocvrozclavsuarmhmqsqqjemmhrbwsbmwssrzkuoqkqbmwsrgltrvlhnrwzacezmadzzhqveelkkvaxydxbgvvzevpnlahdwavbrcuxtwokksupulshxlujzbhurruqhfbfwxfxohdcgsksckakpxrjfbedwemhyweghobmrddyebuzxzemdvbzewlxahroghyjsimipywflaqaelkizpsjbkvakmhrpimthdvjlwpejmozxupfrzsbqxyxcvtgadbgxjrquhqodrvbfbabqyxwzvvqkcnphlzwhpheeqrrckbxsdwipocbjdlzioueovkmgqklkttiygroaeyqvzotbecglhzdomglpvwxjylripmgprxpbujllrllklovkgnhifrrpztfmfnsqkocqlpkfdpwnhaqcmjlxasiehbloowbyndjduqawqkrcxnuujzfcblbhqhiygjzaghpvrovyoddbiyqudqcyhalecyblajdkldkksmqnlhjrrkviitgdvuzwgczzujeabxtznsddzkirsgrltpzrfiuzjbfsmkebreilmswlqxgijtxspwmrcysxxwcfnuodazziupykozfpztoquohxyeqkbbzrympcpehvqmnjnysxgfpldolgzcisawugvmnpmdglytxeibmondgcdodwtyefveyxpmvxdgdrhlvvacofqalqtkdrzniafdqupxnovghraxyjwsprfeummnqovjbonzbwwxluundgyajvvkeyaigibjrjoxgkcngohldlrimxglvhhaokdtklqosxrbytdymnglsovgzfepssfnvwnxcvqlkkkydldxnpklvuirhvzqtzllcahjsbwsvmenroytpxwsjfkausfqqtvjwewqcyvmenuztnygovjwbscsucvjgacoctnschvlyhlxnertqjvpdxwpojtwzofcwgqrgzkndhkvrricprdkdwyaouiyweavyozymbacvywwuubjbcsspismrmjgssizruuthujylvfvnilgrmsixayghqgxaagwfojlhetclsguficcgyzunjmjmnebcbagbssqwpvgldkwipastunfhhrshldeqnqaxwntswtacwzkgbeecoaglyqhkeucrgwteyeoalossquhlyaqfxrjautbbqrmgdwbpritxtovnlvcdwfdpmsmptqyrldojuqoimuvahqauczerpbvroidlnqfkormdokzgeomkdiarrklijyhxbvviydcquxmpwoyuddtdcftberjdhvzccmwjzbalmhbtvqvnhbjojycphedjkruocqcujxwyepscqgovkdvtmqcfjtddbcspkwbqjrqxzbyesgrpmgpbdmamyiusongrnwbnihviyhgosybmvptantfprbflquqqmxruvyudkgwiwprtdvyftyhxetgdcvsywbpcippvmiwbjvxfxggtjldvgauzpmtgwzmkoofjvajqqzlsldrauoucvhkocqaoppsmlisuuzjopiwreltargnaeyptbiqchbaujdeobhzvhepbkxltggyybcpovanyvkqxasegcqmjfxxnxrzibkgkvbyedaeusqjgjqlulkgiwbktuihsdpgaptfbxwyopxmhoqbkcvbhicpyqtvsnafjktppfuusgkulajemjlejblyypezgjwrhepohmazrgybcfffbpwnkhmdsgonwrmukcqafqailgprfmpiugzyjkpxhextbsvcnwupiqgxcmxdbmadcbhprfyuclfddptbqdqviuljzpcbucndyopkqwexccvfrbwkurkiaezhcmvepkwrpmyyvxbuxifsijlyzckqgshwpqjnrfzuggqlgfziddsleqswbvyfbovuyeonxdhjzcpvbgsursaltemnsgaxlyjetydrrxdimfuqqpdbwecltsqraovyghprrhskwlwpivajxumrxuzuhvkaygicjflhnjmklwskfgjxmzvtpspyahtjnytbguagzhhchoiuvhivmqkskixkcszctgjejaqrsuslhhvqsdthlggzkeqolmdovztbmlketnnrdghrumyosevsfjilkjulimbhmvvluygzhxtauqqzxacscmvzbpvdinlpxsnqxthsmdsnebtpxwpvyevdzgojnqxzekugqtnosmmzvxuvrsgbwkakeqmhedspvdbstdlwnniliknfhmrlygxgfohgyicefyqwlmktqnbzwkydooiltutzslnlnosgwygzfpfaazilwzsqjyiuhddzqyndupsaxrndqklqdqxwjmgnxwyrhqcsqpqznjqgpnqduasumfupkxqaevxsomrawhtjdttqwrubvfaknafhpfvsgmwjvqktcrippzrxxumfjxtptwkypuymytgxwpzutzdmrqfmxxdumpyslunjqdyvdeildnetpyebxobqyptzjdmhbkjoxlolezyoxglalueswlwxfibbrqymcmzglrerrqznhevoyovdmczrzwsnhnautskjihmoqxtqrtkakiwrzgogufktwjlqkrepkthazuzkxvjijgeuaidkumrwjnrcqbxhjpezgckydeohngisxznnjxnbdscaswzdnjqjnornpayueolcrgpoqncepriymjdrestrpvkdwahouhifqkylfwdpggohyzrlhbnywqpmfflrfedlawddzkysjdfsgsozgrhxzbfydxtcotjeycigsrndgxzvdxkveumjuzqbbrldgxvqcjumcrxjmrhmoalpwgyzogshluypiaiezfxkfdcgrihubqpqjjizntzqptqyaryugvdzpchmptwkdrqsteajazakstecjfzbejzkumltcotklbuxuodgdgiusvggyypbijnywptzormhtmhofqareojjfjxscxmklqdsvfqwqfbgpvrmcdjjlyrwwfylvejqpezdfnzbgdhyjzufgcdmhhbswachpmbcbhzhyhkinenvynsmcvgjgwswjpctjmgnqqkxunnoaczqontaqizazdibzmuqfapnoycpjpaitcradjxelvivkhkuopktuknebuykewmrzwbjagvmwhspsnhidufwxsbpsxgsnkudyxrzbohlivdqtewcrqwrgaeeoxsazxsolhilhjtoxmrayusjwzggsplwyvjlveqgjsxvrwwikizfvmaybbdzfqyybummcrrkeyiwhteddrskkoiltckjmxpfjciyijpbjuxyatlsuxlenhzwejtlemjqslduitmysypqqpflxjlmntruzqvpbytdwtnsbnaoaiidrxgyqnkfegwzdrecgyykigfrutthdmkwoumxcggphruzkvdxcfkjpnajrmrflllapsurqjoorisnsqntyqepputqknriqditdnyelzosuutvburwsvdfeqpzvyonjpjsxtverroxcvfqlguhugxubusinegbzottmyeffmzbgbuyviyxdsgyhyvdgcojwevjpycwkmkdgqjqmwsnttplfwkhbnлджэ\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария text.length == 7000",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(200);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});\r",
              "pm.globals.unset(\"comment2\");\r",
              "const source = JSON.parse(pm.request.body.raw);\r",
              "const target = pm.response.json();\r",
              "pm.globals.set(\"comment2\", target.created);\r",
              "\r",
              "pm.test(\"комментарий должно содержать поля: id, text, authorName, created\", function () {\r",
              "pm.expect(target).to.have.property('id');\r",
              "pm.expect(target).to.have.property('text');\r",
              "pm.expect(target).to.have.property('authorName');\r",
              "pm.expect(target).to.have.property('created');\r",
              "});\r",
              "\r",
              "pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
              "    pm.expect(target.id).equal(2);\r",
              "    pm.expect(target.text).equal(source.text, 'текст комментария должен соответствовать тексту комментария в запросе');\r",
              "    pm.expect(target.authorName).equal(\"Angel Ratke\", 'Имя автора комметария должно соответствовать имени автора в запросе');\r",
              "     pm.expect(target.created).equal(pm.globals.get('comment2'), 'Время создания комментария должно соответствовать времени создания комментария в запросе');\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"oeskschgofqysbuofxxoiidlrmuwjnlyrsyuhgheuttsefiyflvlhrcntxsrrcaoojqxqdkarhwogpadubfhfshpfjbyaqnboawhbdunhkpjnaqggrzqapoetzvwpqainweesfpfaedrwjkthleqnpbfyqrrsmiwgnapmupdvgxaavqgrcptpgjmqptgieeepsnsfrrltuuhxarkuabdcyupgdbecjdzsqxzvpvpoyiotptywrzdflrgwbzdzvvntzettghdppnbqvpzctfxmouelmkuflikpdqzpdrrdxsahoklodesmfhrcxzyqcsxnybwsnpyjkgrhbrnvrixeeirwrvusnpxtvbrmojcpjhaexcdwhnmhsgtmoqiqibtagdrmlqpmuugbvausdmxgwhlbyzrfmyihbhzwbqdyxrsmhvfrflnrzytsnufydzjbwlyjttesgrubywzxosourbiisfckdgrqeyxlpguiyjwgwwvwvthzrnefxdqrkemoqznlintqfblijyoiecifexacfdiviwtbjlyqfgatzefbwarqvojyzsnhfsxpwtaqmypiyhihvzxagrsgtuabrfbgpbtlhcwmvwaoxrcpgzxchbfmjizjrsuojvimmqxkwkzjaflmdzjbnflnjssjysndnxixtockwoksoyxupeznnrpgxhgppmapifcygcaftdbbqaeugbwxdkhowscdrurnzauqhabzknvddsguwiourdigqiawmjbiuwquwpgywvzreovrfirovmuwqucgizshstfndmwwdpvvidnycemddzrttfvbyhorgqtyjkefcsbjfdexrqwqhhcimvocoextlqyjejlvqjqfgykylmkiymlelvhpqxairgmaukkyciidfzzmygiavwgvjpjwfltbmxzutglbqjjxygzmbluhgbrhpobheqkyecygdugbmguytjdotbkmmilmeefbpojomhbvwxscokskcmuirmbzjidepvqbtskspygrzsbbxcjnqzldwsonwmbzdznkivaxhyjumqcxmqnspikxcxtcruawghclziiypkcgfufkgewbxbcgexfbdaekwmzzgialgamrhtnhstlrfbpxjhhbczibycbupdbeftxgkalkaluokzftdkebffkgdnhgytjciaeciozkpsehawuutzejgkkytptfbpxnyuxwstplsbmbnfdolawxccmsxamugpqiklqpnyqcyjntvjqppdgeezrukbxfalytuqzcunryeadbjcetbsvuzztduszmhhkhdjogawgvqkmezzhoyfdgtfmihlcdphturmtksifcjfmwieyhimtqyesailycqewtqlzfhzksaqdqhwylfakfxntiaxkoveqgrkpfwjlvhootsmkqiihxooceywcsqxvcrljtrkvwvtsxkrdiqpmxrbfvyukawwftohclgqqsuhqxzogfbwileiyrezpbtquazsazjuuyketmdeaqchbtyernlykzipgmmwwmlnkknlgcbvbixzkccrzdppalneqbffkpvlsdacynnagogqyoomtwlfmcoultzydvrcxdakvgthhsdsenkrorxbwfuwpnbtgwehqywedvjwmmqdksnsajuntoxmyreaqjixullrveywlfoijchrltppvhmqogflkevfohnugvvhplhkhqgwefefpbcumqhusfbsnoiirczmicfcrawcorpnnqpsbbbracymfhejffqlnhaydqaromhzmxzgzwzvkeznsogbbwyipakdecshnypqdjqstpgmvttcwooxmcjmqnfpeycrocanjvpcttfceicwisbsutgwzpgnnynyygdqwjylcyquqvsrlmsmupghuonqbvxbozzrvcccdsdwqwsrfaruyimmuzvrfozjwdjzjcadwumfljtimdjfxjlaihputfkjlegybxjnspilfyivukncgoepktxiqbrgzxckxmejkrisnjbvrvizxkmnymtkuvppqdzgzufuuiiyimhgdrmuopgkirvaeaiatvybwjmbndnrriusdmrriixfkuymdfnmsibfnulirhzbypydnfhdkvwqcnhxqksrjvhcmyphopfyiyqvavrvuviuyvmgmvlarbvvfmirgnqprfejxmuprmbcacnfynfqpapphlwcopagzlkqbzrepdngglpbfckyjlxrfwblrgpqcpmdkxatpfyesbtvpxjgipgetgovfbpabpyyjtnumfpkkqcghvqkfujshuelsglpqtfezonqdeioszzqmadjtpipmejwuplqczlyfnkbnvoangsayxpqtaxigguoplaaqscleugktgbbaokodweafivhtqvaeukaxztgzvggmqumsdfyxenoslhumftvkbcasigqprktimbsbazqbmxytceqbckoqiyuiphmdguknqcvxtuqimlimxmmlnylysypsmlviuqyeowbrxrjgxzmiwppiqldfgdrfzusdrgheuvjjyzuppujftjpbxkzhjkrtpmyjjqhndpnliwojisuhtkuwklefpdyemwezreeiehpiwciysgavcffbjgdelmujqployewcokrslavkwyscqcqyrzhgzptfddnyksluwdconvuzqdhptegdfhkkatlbdqyeoxyljigjyxzkuafpngkccmspnexfhfjlvzfqgjeqktaxwdsuiahgstazyyoigegarlweaydntfseqbskafzrzkwvnvyaghxyduwcbhspeblxlxivgbofumksobstaifyfxivnynvtwbtvwcrfvnrqqgcobaigevtpgpvjcseglvbikfylvsapecuzabkmudlyueevsahctzbkmzhbxygkltpkkjkwamitqfltywjjudbtyipjtlliltnrspfpmrsmtnuqoibbcqxqithoxjqmgidskaoqmexswccaczhhjgdxcvikzspbjgnwrkmrurgrxkskrkjqdlvqdtllvoobrqgpgtvmqkshxzzmjczlfcncgswhcqxgqnjxoiigfvuurmtsbzlkcwcxkrptmwrjgnbiulxnvlrxdlmdxyutocppbbonbvdbedgmvebbnrhiinmtiaxgiozeqexdxgxwjndwtjkqqcfueafevhuiepzeordvturlsbhyjvseqyabsqjmwzrgohqssvilekcvjffejisiuxjhocsczsvvgtsfuxdftqocskwecwewagvamhkiasjfzijzfitryxzeateopyqekyfvrsviezsfiujcztmtkbiqpmdzuhkskvxjxsouazwhdmthoiwhlfialerjrjootfwldbgnsphbvkuvqjllyfvsryxshdetjnwfqxkkrnhsxiudkxuxijsvjoynuromjuozwhrfsqnmchabthnocvrozclavsuarmhmqsqqjemmhrbwsbmwssrzkuoqkqbmwsrgltrvlhnrwzacezmadzzhqveelkkvaxydxbgvvzevpnlahdwavbrcuxtwokksupulshxlujzbhurruqhfbfwxfxohdcgsksckakpxrjfbedwemhyweghobmrddyebuzxzemdvbzewlxahroghyjsimipywflaqaelkizpsjbkvakmhrpimthdvjlwpejmozxupfrzsbqxyxcvtgadbgxjrquhqodrvbfbabqyxwzvvqkcnphlzwhpheeqrrckbxsdwipocbjdlzioueovkmgqklkttiygroaeyqvzotbecglhzdomglpvwxjylripmgprxpbujllrllklovkgnhifrrpztfmfnsqkocqlpkfdpwnhaqcmjlxasiehbloowbyndjduqawqkrcxnuujzfcblbhqhiygjzaghpvrovyoddbiyqudqcyhalecyblajdkldkksmqnlhjrrkviitgdvuzwgczzujeabxtznsddzkirsgrltpzrfiuzjbfsmkebreilmswlqxgijtxspwmrcysxxwcfnuodazziupykozfpztoquohxyeqkbbzrympcpehvqmnjnysxgfpldolgzcisawugvmnpmdglytxeibmondgcdodwtyefveyxpmvxdgdrhlvvacofqalqtkdrzniafdqupxnovghraxyjwsprfeummnqovjbonzbwwxluundgyajvvkeyaigibjrjoxgkcngohldlrimxglvhhaokdtklqosxrbytdymnglsovgzfepssfnvwnxcvqlkkkydldxnpklvuirhvzqtzllcahjsbwsvmenroytpxwsjfkausfqqtvjwewqcyvmenuztnygovjwbscsucvjgacoctnschvlyhlxnertqjvpdxwpojtwzofcwgqrgzkndhkvrricprdkdwyaouiyweavyozymbacvywwuubjbcsspismrmjgssizruuthujylvfvnilgrmsixayghqgxaagwfojlhetclsguficcgyzunjmjmnebcbagbssqwpvgldkwipastunfhhrshldeqnqaxwntswtacwzkgbeecoaglyqhkeucrgwteyeoalossquhlyaqfxrjautbbqrmgdwbpritxtovnlvcdwfdpmsmptqyrldojuqoimuvahqauczerpbvroidlnqfkormdokzgeomkdiarrklijyhxbvviydcquxmpwoyuddtdcftberjdhvzccmwjzbalmhbtvqvnhbjojycphedjkruocqcujxwyepscqgovkdvtmqcfjtddbcspkwbqjrqxzbyesgrpmgpbdmamyiusongrnwbnihviyhgosybmvptantfprbflquqqmxruvyudkgwiwprtdvyftyhxetgdcvsywbpcippvmiwbjvxfxggtjldvgauzpmtgwzmkoofjvajqqzlsldrauoucvhkocqaoppsmlisuuzjopiwreltargnaeyptbiqchbaujdeobhzvhepbkxltggyybcpovanyvkqxasegcqmjfxxnxrzibkgkvbyedaeusqjgjqlulkgiwbktuihsdpgaptfbxwyopxmhoqbkcvbhicpyqtvsnafjktppfuusgkulajemjlejblyypezgjwrhepohmazrgybcfffbpwnkhmdsgonwrmukcqafqailgprfmpiugzyjkpxhextbsvcnwupiqgxcmxdbmadcbhprfyuclfddptbqdqviuljzpcbucndyopkqwexccvfrbwkurkiaezhcmvepkwrpmyyvxbuxifsijlyzckqgshwpqjnrfzuggqlgfziddsleqswbvyfbovuyeonxdhjzcpvbgsursaltemnsgaxlyjetydrrxdimfuqqpdbwecltsqraovyghprrhskwlwpivajxumrxuzuhvkaygicjflhnjmklwskfgjxmzvtpspyahtjnytbguagzhhchoiuvhivmqkskixkcszctgjejaqrsuslhhvqsdthlggzkeqolmdovztbmlketnnrdghrumyosevsfjilkjulimbhmvvluygzhxtauqqzxacscmvzbpvdinlpxsnqxthsmdsnebtpxwpvyevdzgojnqxzekugqtnosmmzvxuvrsgbwkakeqmhedspvdbstdlwnniliknfhmrlygxgfohgyicefyqwlmktqnbzwkydooiltutzslnlnosgwygzfpfaazilwzsqjyiuhddzqyndupsaxrndqklqdqxwjmgnxwyrhqcsqpqznjqgpnqduasumfupkxqaevxsomrawhtjdttqwrubvfaknafhpfvsgmwjvqktcrippzrxxumfjxtptwkypuymytgxwpzutzdmrqfmxxdumpyslunjqdyvdeildnetpyebxobqyptzjdmhbkjoxlolezyoxglalueswlwxfibbrqymcmzglrerrqznhevoyovdmczrzwsnhnautskjihmoqxtqrtkakiwrzgogufktwjlqkrepkthazuzkxvjijgeuaidkumrwjnrcqbxhjpezgckydeohngisxznnjxnbdscaswzdnjqjnornpayueolcrgpoqncepriymjdrestrpvkdwahouhifqkylfwdpggohyzrlhbnywqpmfflrfedlawddzkysjdfsgsozgrhxzbfydxtcotjeycigsrndgxzvdxkveumjuzqbbrldgxvqcjumcrxjmrhmoalpwgyzogshluypiaiezfxkfdcgrihubqpqjjizntzqptqyaryugvdzpchmptwkdrqsteajazakstecjfzbejzkumltcotklbuxuodgdgiusvggyypbijnywptzormhtmhofqareojjfjxscxmklqdsvfqwqfbgpvrmcdjjlyrwwfylvejqpezdfnzbgdhyjzufgcdmhhbswachpmbcbhzhyhkinenvynsmcvgjgwswjpctjmgnqqkxunnoaczqontaqizazdibzmuqfapnoycpjpaitcradjxelvivkhkuopktuknebuykewmrzwbjagvmwhspsnhidufwxsbpsxgsnkudyxrzbohlivdqtewcrqwrgaeeoxsazxsolhilhjtoxmrayusjwzggsplwyvjlveqgjsxvrwwikizfvmaybbdzfqyybummcrrkeyiwhteddrskkoiltckjmxpfjciyijpbjuxyatlsuxlenhzwejtlemjqslduitmysypqqpflxjlmntruzqvpbytdwtnsbnaoaiidrxgyqnkfegwzdrecgyykigfrutthdmkwoumxcggphruzkvdxcfkjpnajrmrflllapsurqjoorisnsqntyqepputqknriqditdnyelzosuutvburwsvdfeqpzvyonjpjsxtverroxcvfqlguhugxubusinegbzottmyeffmzbgbuyviyxdsgyhyvdgcojwevjpycwkmkdgqjqmwsnttplfwkhbn\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария без поля text",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария со строкой из пробелов",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"                            \"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "обновление комментария с пустым полем",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
              "    pm.response.to.be.badRequest;    \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"text\": \"\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/users/:uid/comments/:cid",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "users",
            ":uid",
            "comments",
            ":cid"
          ],
          "variable": [
            {
              "key": "uid",
              "value": "1"
            },
            {
              "key": "cid",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "удаление существующего вместе с несуществующим комментарием",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 203 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(203);  \r",
              "    pm.response.to.be.withBody;\r",
              "    pm.response.to.be.json;\r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?ids=1000&ids=2",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "ids",
              "value": "1000"
            },
            {
              "key": "ids",
              "value": "2"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "удаление всех комментариев",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Ответ должен содержать код статуса 204 и данные в формате json\", function () {\r",
              "    pm.response.to.have.status(204);  \r",
              "});"
            ],
            "type": "text/javascript",
            "packages": {}
          }
        }
      ],
      "request": {
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/admin/comments?ids=1&ids=3&ids=4&ids=5&ids=6",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "admin",
            "comments"
          ],
          "query": [
            {
              "key": "ids",
              "value": "1"
            },
            {
              "key": "ids",
              "value": "3"
            },
            {
              "key": "ids",
              "value": "4"
            },
            {
              "key": "ids",
              "value": "5"
            },
            {
              "key": "ids",
              "value": "6"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "response",
      "value": "",
      "type": "string"
    }
  ]
}